//////// NOTE : Noise input model as InGauss her.
////////      : Photoactivation Current model as IClamp
////////      : Noise Current model as InGauss
//Main Code
load_file("nrngui.hoc") //load basics library
load_file("ranstream.hoc") //for InGauss random seed
load_file("PD_Parameters.hoc") //Parameters
////////////////////////////////////////////////////
MAKE_M1_LAYER = 0  // Testing first
ADD_I_to_M1 = 0
ADD_I_to_VL = 0
////////////////////////////////////////////////////////
load_file("PD4_CellsTemplate.hoc") //load basics library  Note: Parameters for Cells template are specified inside

strdef dirLoc, Vdiff_WT, Vdiff_KO
sprint(dirLoc,"SimResult/CellProp_NoiseInGauss/")
objref WT, KO, WT_InG, KO_InG,  WT_IC, KO_IC
Mean = 0
STDEV = 0
Del = 1000
Dur =  1000
IC_AMP = 0
WT_delV = 0
KO_delV = 0
{ WT_T1 = 0 WT_T2 = 0 KO_T1 = 0 KO_T2 = 0 WT_minV = v_init KO_minV = v_init  WT_maxV = v_init KO_maxV = v_init}

T1 = 900
T2 = 1800

WT = new WT_Cell()
access WT.soma // access WT's soma to inject mechanism
WT_InG = new InGauss(0.5) // InGauss for noise current
WT_InG.stdev = STDEV // sigma
WT_InG.mean = -1*Mean // mean  -> The original InGauss mechanism use -negative for depolarize signal  so multiply by -1 to make the sign convention same with IClamp
WT_InG.del = 0 // delay = starting time for injection
WT_InG.dur = 1e09  // forever
WT_IC = new IClamp(0.5) // ICLamp = Current Clamp 
WT_IC.amp = IC_AMP // amplitude (unit is nA)
WT_IC.del = Del // Delay = starting time for injection
WT_IC.dur = Dur // Duration of injection

KO = new KO_Cell()
access KO.soma // access WT's soma to inject mechanism
KO_InG = new InGauss(0.5)
KO_InG.stdev = STDEV
KO_InG.mean  = -1*Mean
KO_InG.del = 0 
KO_InG.dur = 1e09 

KO_IC = new IClamp(0.5)
KO_IC.amp = IC_AMP
KO_IC.del = Del
KO_IC.dur = Dur


objref WT_V, KO_V
WT_V = new Vector()
KO_V = new Vector()

WT_V.record(&WT.soma.v(0.5),1) // Record Membrane Potential of WT cell
KO_V.record(&KO.soma.v(0.5),1) // Record Membrane Potential of KO cell


proc saveVolt(){localobj fout strdef fname 
fout = new File()
sprint(fname,"%sSomaVolt_IGmean%g_IGstdev%g_ICamp%g_ICdel%g_ICdur%g_L%g_diam%g_Ra%g_cm%g_gnabar%g_gkbar%g_gl%g_el%g_ena%g_ek%g_gCaT%g_eca%g_T%g.txt",dirLoc,-1*WT_InG.mean,WT_InG.stdev, WT_IC.amp, WT_IC.del,WT_IC.dur, SOMA_SIZE_L, SOMA_SIZE_diam,SOMA_Ra,SOMA_cm,GNaBAR_HH,GKBAR_HH,GL_PAS,EL_PAS,ENa_HH,EK_HH,GCaMAX_CaT,ECa_CaT,tstop) 
fout.wopen(fname)
WT_V.printf(fout,"%g\t",0,WT_V.size-1)
KO_V.printf(fout,"%g\t",0,KO_V.size-1)
fout.close()
printf("Saved file :: %s\n",fname)
printf("-------------------------------------------------\n\n")
}

proc show_V_diff(){
WT_T1 = WT_V.x(T1)
WT_T2 = WT_V.x(T2)
KO_T1 = KO_V.x(T1)
KO_T2 = KO_V.x(T2)
WT_delV = WT_V.x(T2) - WT_V.x(T1)
KO_delV = KO_V.x(T2) - KO_V.x(T1)
WT_minV = WT_V.c(T1,T2).min()
KO_minV = KO_V.c(T1,T2).min()
WT_maxV = WT_V.c(T1,T2).max()
KO_maxV = KO_V.c(T1,T2).max()
}


proc panel_button() { //panel
xpanel("Setting Simulation Parameter")
xlabel("=== Setting IClamp injection (as photoactivation) parameters ===")
xvalue("Set IClamp amplitude","IC_AMP",1,"{WT_IC.amp = IC_AMP KO_IC.amp = IC_AMP }",0,1)
xvalue("Set IClamp delay","Del",1,"{WT_IC.del = Del KO_IC.del = Del}",0,1)
xvalue("Set IClamp duration","Dur",1,"{WT_IC.dur = Dur KO_IC.dur = Dur}",0,1)
xlabel("")
xlabel("=== Setting noise current parameters (Gaussian Noise Current) ===")
xvalue("Set mean value","Mean",1,"{WT_InG.mean = -1*Mean KO_InG.mean = -1*Mean}",0,1)
xvalue("Set STDEV value","STDEV",1,"{WT_InG.stdev = STDEV KO_InG.stdev = STDEV}",0,1)
xlabel("")
xlabel("=== Set parameters for cell's properties ===")
xvalue("Set Cell parameter : SOMA_SIZE_L","SOMA_SIZE_L",1,"{WT.soma.L = SOMA_SIZE_L  KO.soma.L = SOMA_SIZE_L }",0,1)
xvalue("Set Cell parameter : SOMA_SIZE_diam","SOMA_SIZE_diam",1,"{WT.soma.diam = SOMA_SIZE_diam  KO.soma.diam = SOMA_SIZE_diam }",0,1)
xvalue("Set Cell parameter : SOMA_Ra","SOMA_Ra",1,"{WT.soma.Ra = SOMA_Ra KO.soma.Ra = SOMA_Ra}",0,1)
xvalue("Set Cell parameter : SOMA_cm","SOMA_cm",1,"{WT.soma.cm = SOMA_cm KO.soma.cm = SOMA_cm}",0,1)
xvalue("Set Cell parameter : GNaBAR_HH","GNaBAR_HH",1,"{WT.soma.gnabar_hh = GNaBAR_HH  KO.soma.gnabar_hh = GNaBAR_HH}",0,1)
xvalue("Set Cell parameter : GKBAR_HH","GKBAR_HH",1,"{WT.soma.gkbar_hh = GKBAR_HH  KO.soma.gkbar_hh = GKBAR_HH} ",0,1)
xvalue("Set Cell parameter : ENa_HH","ENa_HH",1,"{WT.soma.ena = ENa_HH KO.soma.ena = ENa_HH}",0,1)
xvalue("Set Cell parameter : EK_HH","EK_HH",1,"{WT.soma.ek = EK_HH KO.soma.ek = EK_HH}",0,1)
xvalue("Set Cell parameter : GL_PAS","GL_PAS",1,"{WT.soma.g_pas = GL_PAS  KO.soma.g_pas = GL_PAS}",0,1)
xvalue("Set Cell parameter : EL_PAS","EL_PAS",1,"{WT.soma.e_pas = EL_PAS KO.soma.e_pas = EL_PAS}",0,1)
xvalue("Set Cell parameter : GCaMAX_CaT","GCaMAX_CaT",1,"{WT.soma.gmax_CaT = GCaMAX_CaT}",0,1)
xvalue("Set Cell parameter : ECa_CaT","ECa_CaT",1,"{WT.soma.eca = ECa_CaT}",0,1)
xlabel("")
xlabel("=== Measure difference in voltage ===")
xvalue("T1","T1",1,"T1",0,1) xvalue("T2","T2",1,"T2",0,1)
xbutton("Voltage Difference", "show_V_diff()") 

xfixedvalue("WT_T1")  xfixedvalue("WT_T2")  
xfixedvalue("KO_T1")  xfixedvalue("KO_T2")  
xlabel("")
xfixedvalue("WT_delV")
xfixedvalue("KO_delV")
xlabel("")
xfixedvalue("WT_minV")  xfixedvalue("KO_minV")  
xfixedvalue("WT_maxV")  xfixedvalue("KO_maxV") 
xfixedvalue("WT_maxV - WT_minV")  xfixedvalue("KO_maxV- KO_minV")  
//xbutton("set_CellParameters", "set_CellParameters()")
xbutton("saveVolt", "saveVolt()")
xpanel()
}

load_file("WT_KO_InG_IC.ses")
tstop = 3000
v_init = -70
WT_minV = v_init 
KO_minV = v_init

// panel_button()



////////////////////////// Try many parameter sets 
objref InGstdev_paramLST, InGmean_paramLST, IC_paramLST, SOMA_SIZE_paramLST, gL_paramLST

InGstdev_paramLST = new Vector(3) 

// Sim 1 : Soma Size = 32, gL = 0.0003
//{SOMA_SIZE_L = 32  SOMA_SIZE_diam = 32 GL_PAS = 0.0003 } // Stdev = 0:0.1:0.5
//InGstdev_paramLST.indgen(0,0.5,0.1) // 0:0.1:0.5

// Sim 2 : Soma Size = 32, gL = 0.0003
//{SOMA_SIZE_L = 36  SOMA_SIZE_diam = 36 GL_PAS = 0.0003 } // Stdev = 0:0.1:0.7
//InGstdev_paramLST.indgen(0,0.8,0.1) // 0:0.1:0.8

//{WT.soma.L = SOMA_SIZE_L  KO.soma.L = SOMA_SIZE_L }
//{WT.soma.diam = SOMA_SIZE_diam  KO.soma.diam = SOMA_SIZE_diam }
//{WT.soma.g_pas = GL_PAS  KO.soma.g_pas = GL_PAS}



SOMA_SIZE_paramLST = new Vector(6)
//SOMA_SIZE_paramLST.indgen(20,50,10)
//SOMA_SIZE_paramLST.x(0) = 25 // 25, 30, 40, 50
SOMA_SIZE_paramLST.indgen(25,30,1)


gL_paramLST = new Vector(3)
//gL_paramLST.x(0) = 5e-04
gL_paramLST.indgen(3e-04,4e-04,0.5e-04)

InGstdev_paramLST.indgen(0,0.2,0.05) // 0:0.05: 0.2

InGmean_paramLST = new Vector(1)
{InGmean_paramLST.x(0) = 0 }    

IC_paramLST = new Vector(3)
{IC_paramLST.x(0) = -0.3  IC_paramLST.x(1) = 0.25 IC_paramLST.x(2) = 0 }    

CNT = 0
t_loop = startsw()

for ss_ii = 0,SOMA_SIZE_paramLST.size -1 { 
 SOMA_SIZE_L  = SOMA_SIZE_paramLST.x(ss_ii)
 SOMA_SIZE_diam  = SOMA_SIZE_paramLST.x(ss_ii)
 {WT.soma.L = SOMA_SIZE_L  KO.soma.L = SOMA_SIZE_L }
 {WT.soma.diam = SOMA_SIZE_diam  KO.soma.diam = SOMA_SIZE_diam }
 printf("Soma Size#%g : %g\n", ss_ii, SOMA_SIZE_paramLST.x(ss_ii))
 
 for gl_ii = 0,gL_paramLST.size -1 { 
 GL_PAS  = gL_paramLST.x(gl_ii)
 {WT.soma.g_pas = GL_PAS  KO.soma.g_pas = GL_PAS}
 printf("\t gL #%g : %g\n", gl_ii, gL_paramLST.x(gl_ii))
 
for ic_ii = 0, IC_paramLST.size - 1 {
	IC_AMP = IC_paramLST.x(ic_ii)
	{WT_IC.amp = IC_AMP KO_IC.amp = IC_AMP }
	printf("\t\tIClamp injection amplitude#%g : %g\n", ic_ii, IC_paramLST.x(ic_ii))
	
	for igm_ii = 0, InGmean_paramLST.size - 1 {
		Mean = InGmean_paramLST.x(igm_ii)
		{WT_InG.mean = -1*Mean KO_InG.mean = -1*Mean}
		printf("\t\t\t Noise Current Mean #%g : %g\n", igm_ii, Mean)
		
		for igs_ii = 0, InGstdev_paramLST.size - 1 {
			STDEV = InGstdev_paramLST.x(igs_ii)
			printf("\t\t\t\t Noise Current STDEV#%g : %g\n", igs_ii, STDEV)
			{WT_InG.stdev = STDEV KO_InG.stdev = STDEV}
			printf("\t\t\t\t\t Called Run ...\n")
				run()
			printf("\t\t\t\t\t Finished Run, call saveVolt... \n")
				saveVolt()
			printf("\t\t\t Saved ...\n\n")
			CNT = CNT + 1
			printf("\t\t ============= End Set #%g ============\n",CNT)
		}
	}
	}
	}
printf("========================= End one big Loop ========================\n")
}
print "Total Runtime :: ", startsw()-t_loop
print "\n *End Simulation*\n"	
