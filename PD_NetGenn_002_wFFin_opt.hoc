//////////  Ver 005
///   Have two mode of cells generation -> for individual cells and from input Epos & Ipos position
///   Inject noisy gaussian current (with InGauss) for spontaneous activities. Return back to mcell_ran4 for noise generator
///   Inject input current with IClamp
///   move all objref on top of the hoc file
///	  Insert Poisson spike input to cell. Use random123 generator with specified id
//////////////////* Network Generation *//////////////////

//{cells = new List() cellsIN = new List() cellsE = new List() cellsI = new List()  cellsCN = new List()
 //nclist = new List() cellsFFin= new List() }
 {cells.remove_all() cellsIN.remove_all() cellsE.remove_all() cellsI.remove_all()  cellsCN.remove_all()
 nclist.remove_all() cellsFFin.remove_all() }
//Note: with remove_all() function of List, the original object still there and not delete. Just that the links from List() to the object are gone.
//      If the object has no label refer to it, it is destroyed.
// Use in the case of individual neuron
if(INDV_NEURON){ //0: Not in use
	cIDrec = -1
	str_E = cIDrec+1  
	Erec= -1
	for i=0,N_REPEAT-1 {
		cIDrec = cIDrec+1 
		Erec=Erec+1
		if ( CELL_TYPE == 1){ // 1 = WT, 2 = KO
		cell_append(new WT_Cell(),50,50, 0,cIDrec, Erec,1)
		}else{
		cell_append(new KO_Cell(),50,50, 0,cIDrec, Erec,1)
		}
		cellsE.append(cells.object(cIDrec))
		cellsCN.append(cells.object(cIDrec)) //cellsCN contains cortical neurons (exclude input cells)
	}
	ZdiffEI =10 

	str_I = cIDrec+1  
	Irec= -1
	for i=0,N_REPEAT-1 {
		cIDrec = cIDrec+1 
		Irec=Irec+1
		if ( CELL_TYPE == 1){ // 1 = WT, 2 = KO
		cell_append(new WT_Cell(),100,100, ZdiffEI,cIDrec, Irec,2)
		}else{
		cell_append(new KO_Cell(),100,100, ZdiffEI,cIDrec, Irec,2)
		}
		cellsI.append(cells.object(cIDrec))
		cellsCN.append(cells.object(cIDrec))
	}	
}	

if(!INDV_NEURON){
// Use the specified cells position
//E cells 
cIDrec = -1
str_E = cIDrec+1  
Erec= -1
for (i=0;i<nE;i=i+1){
	cIDrec = cIDrec+1 
	Erec=Erec+1
	if ( CELL_TYPE == 1){ // 1 = WT, 2 = KO
	cell_append(new WT_Cell(),posEx.x(i),posEy.x(i), 0,cIDrec, Erec,1)
	}else{
	cell_append(new KO_Cell(),posEx.x(i),posEy.x(i), 0,cIDrec, Erec,1)
	}
	cellsE.append(cells.object(cIDrec))
	cellsCN.append(cells.object(cIDrec)) //cellsCN contains cored neurons (exclude input cells)
} //End generate E
ZdiffEI =10 //Distance difference in Z-axis between E plane and I plane 

//I cells 
str_I = cIDrec+1  
Irec= -1
for (i=0;i<nI; i=i+1){
	cIDrec = cIDrec+1 
	Irec=Irec+1
	if ( CELL_TYPE == 1){ // 1 = WT, 2 = KO
		cell_append(new WT_Cell(),posIx.x(i),posIy.x(i), ZdiffEI,cIDrec, Irec,2)
	}else{
	cell_append(new KO_Cell(),posIx.x(i),posIy.x(i), ZdiffEI,cIDrec, Irec,2)
	}
	cellsI.append(cells.object(cIDrec))
	cellsCN.append(cells.object(cIDrec))
} //End generate I
}

//Save cells position
objref fout
strdef fname
if (POSTFIX){
sprint(fname,"%sNeurons_location_%s.txt",dirLoc,postfixTxt) 
}else{
sprint(fname,"%sNeurons_location.txt",dirLoc)
}
fout = new File()
fout.wopen(fname)
for i = 0, cellsCN.count-1{
	fout.printf("%g\t%g\t%g\t%g\n", cellsCN.o(i).cID,cellsCN.o(i).x,cellsCN.o(i).y,cellsCN.o(i).z)
}
fout.close()




//////////////////Background Noise of the cell///////////////
if (ADD_SPONTANEOUS_ACTIVITY){
//The following segment for noise need ("ranstream.hoc") // Done it in MainCode
random_stream_offset_ = (tstop+1000)*1/dt // assumes dt = 0.025  //////////////////////////////////////////// Check  whether the values is change every dt or point resolution, i.e. 1/dt or steps_per_ms
inoise_random_low_start_ = 1
mcell_ran4_init(inoise_random_low_start_)

//objref rslist, inlist,in
//rslist = new List()
//inlist = new List()
rslist.remove_all()
inlist.remove_all()

for i = 0, cellsCN.count-1 {
	access cellsCN.o(i).soma 

	in = new InGauss(0.5) // add background noise to the cell 
	in.mean = MEAN // nA
	in.stdev = STDEV // nA
	in.del = 0 // ms
	in.dur = 1e9 // "forever"
	inlist.append(in)
	rslist.append(new RandomStream(i))
	rslist.o(i).r.normal(0,1) //uniform(0,1) // mean 0, variance 1
	rslist.o(i).start()
	inlist.o(i).noiseFromRandom(rslist.o(i).r)
}	
}


////////////////// Input to individual cells/////////////// (in LocalConn)**************************************

/////// Injected input current ///////
objref stim
//objref IClamplist
//IClamplist = new List() 
IClamplist.remove_all()
if (INSERT_I_INPUT){
	IClamplist = new List() //Injected current to all cells
	if(INSERT_I_to_E){
		for i =0, cellsE.count-1{ //injected E only
			access cellsE.o(i).soma 
			stim = new IClamp(0.5)
			stim.del = 500
			stim.amp = Input_I_Amp //[nA]
			stim.dur = 500 // 1e9 // "forever" *****************************
			IClamplist.append(stim) // can retrive the stim by IClamplist.o(CID)
		}
	}
	if(INSERT_I_to_I){
		for i =0, cellsI.count-1{ //injected E only
			access cellsI.o(i).soma 
			stim = new IClamp(0.5)
			stim.amp = Input_I_Amp //[nA]
			stim.dur = 1e9 // "forever"
			IClamplist.append(stim) // can retrive the stim by IClamplist.o(CID)
		}	
	}
}


/////// Injected input current to single cell in network (E cell at center) ///////
objref injIClamp_Single

if (INSERT_I_to_SpecifiedE){	
			access cellsE.o(ID_SPECIFIED_E).soma  //Specified E cell only , E cell located within center of the network
			injIClamp_Single = new IClamp(0.5)
			injIClamp_Single.del = 500
			injIClamp_Single.amp = Input_I_Amp //[nA]
			injIClamp_Single.dur = 500 // 1e9 = "forever"
}
	

/////// Poisson spikes input ///////
 
//New write

//RANDOM123_ID1_POISSONSPK = 1
//RANDOM123_ID3_RUN_POISSONSPK = 1 // Specified in main code

obfunc  poissonGenerator() { local tmpr,p,ii localobj rr, spktrain, spktime 
//Return vector of spiking time (in ms)
// $1 = seed, $2 = resolution (size of one bin in ms), $3 = time (ms), $4 = average firing rate
	rr = new Random()
	rr.uniform(0,1)
	rr.Random123(RANDOM123_ID1_POISSONSPK,$1,RANDOM123_ID3_RUN_POISSONSPK)
	spktrain = new Vector($3/$2) //Not use now
	spktime = new Vector()
	p = $4/(1000/$2)
	//printf("p: %f \n", p)   
	for ii =0,spktrain.size-1 {
		tmpr = rr.repick
		
		if (tmpr < p){  //spike occur
			spktrain.x(ii) = 1
			spktime.append($2*ii)
		}else{
			spktrain.x(ii) = 0
		}
	}
	return spktime // spkvec, 1) the multiple arrival time in one VecStim is account as the only one spike. 2) The spike time vector need to be sort ascending(less...more).
}
 
spkvec_list.remove_all()
cellsFFin.remove_all()
//objref recordseed
//recordseed = new Vector()
recordseed.resize(0)

if(INSERT_SPK_INPUT ){
print "Called PoisSpk "
//Generate artificial cells for input   //# = total cell
	 // Feedforward(FF) input Poisson spikes cell
	wFFin = 0.0005 //0.001 // weight for FF input 
	str_FFin = cIDrec+1
	FFinrec = -1
	nFF = cellsE.count + cellsI.count //give FF input to E cell only
	FFzpos = -50
	for (i=0;i<cellsE.count + cellsI.count;i=i+1){
		cIDrec = cIDrec+1 
		FFinrec=FFinrec+1
		cell_append(new In_spk_VecStim(),0,100, FFzpos,cIDrec, FFinrec,0) // cell type = 0  for FF input
		cellsFFin.append(cells.object(cIDrec))
	}
	
	
if (INSERT_SPK_to_E && INSERT_SPK_to_I){ // Insert spike train to both E & I cells

	print "Called : both E I"
	//seedGen(cellsE.count+cellsI.count) 
	print "spkvec_list's size = ", spkvec_list.count
	recordseed.resize(cellsE.count + cellsI.count)
	//Generate Poissoin in each run by time tstop
	for i=0, cellsFFin.count-1 {
		if(MULT_TRIAL){ 
		spkvec_list.append( poissonGenerator(cellsFFin.o(i).cID*cntTrial,steps_per_ms,tstop,Input_spk_avg_fr ))
		recordseed.x(i) = cellsFFin.o(i).cID*cntTrial 
		}else{
		spkvec_list.append( poissonGenerator(cellsFFin.o(i).cID,steps_per_ms,tstop,Input_spk_avg_fr ))
		recordseed.x(i) = cellsFFin.o(i).cID // specified ID#2 of RANDOM123 as cell ID of that input cell--> to be sure that there is no cell with same seed
		}
		cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
		nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay  //check the weight
	}
	
	}else {
		if (INSERT_SPK_to_E){
			print "called INSERT_SPK_to_E only case"
			recordseed.resize(cellsE.count)
			//Generate Poissoin in each run by time tstop
			for i=0, cellsE.count-1 {
			if(MULT_TRIAL){ 
				spkvec_list.append( poissonGenerator(cellsFFin.o(i).cID*cntTrial,steps_per_ms,tstop,Input_spk_avg_fr ))
				recordseed.x(i) = cellsFFin.o(i).cID*cntTrial 
			}else{
				spkvec_list.append( poissonGenerator(cellsFFin.o(i).cID,steps_per_ms,tstop,Input_spk_avg_fr ))
				recordseed.x(i) = cellsFFin.o(i).cID // Use cells ID as seed
				}
				cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
				nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
			}
		}else {
			if (INSERT_SPK_to_I){
				//seedGen(cellsI.count) 
				recordseed.resize(cellsI.count)
				//Generate Poissoin in each run by time tstop
				for i=0, cellsI.count-1 {
					if(MULT_TRIAL){ 
						spkvec_list.append( poissonGenerator(cellsFFin.o(nE+i).cID*cntTrial,steps_per_ms,tstop,Input_spk_avg_fr ))
						recordseed.x(i) = cellsFFin.o(nE+i).cID*cntTrial 
					}else{
					spkvec_list.append( poissonGenerator(cellsFFin.o(nE+i).cID,steps_per_ms,tstop,Input_spk_avg_fr ))
					recordseed.x(i) = cellsFFin.o(nE+i).cID
					}
					cellsFFin.o(nE+i).pp.play(spkvec_list.o(i)) 
					nc_append(str_FFin+i,str_I+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
				}
			}
		}
	}
	
}	
	
	
	/*(
	
	
	
	if(MULT_TRIAL){
		if (cntTrial ==1){ // first run
		//seedGen(cellsCN.count*N_TRIAL) 
		genseedlist = seedlist.c
		seedlist = genseedlist.c(1,cellsCN.count)
		printf("seedlist ID from 1 to %g\n", cellsCN.count)
		printf("seedlist.size = %g\n",seedlist.size)
		}else {
		seedlist = genseedlist.c((cntTrial-1)*cellsCN.count+1,cntTrial*cellsCN.count)
		printf("seedlist ID from %g to %g\n", (cntTrial-1)*cellsCN.count+1,cntTrial*cellsCN.count)
		printf("seedlist.size = %g\n",seedlist.size)
		}
	} else { seedGen(cellsE.count+cellsI.count) }
	//spkvec_list = new List()
	
if (INSERT_SPK_to_E && INSERT_SPK_to_I){
	print "Called : both E I"
	//seedGen(cellsE.count+cellsI.count) 
	print "seedGen generator"
	print "spkvec_list's size = ", spkvec_list.count
	
	//Generate Poissoin in each run by time tstop
	for i=0, cellsFFin.count-1 {
		spkvec_list.append( poissonGenerator(seedlist.x(i),steps_per_ms,tstop,Input_spk_avg_fr ))
		cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
		nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay  //check the weight
	}
	
	}else {
		if (INSERT_SPK_to_E){
			print "called INSERT_SPK_to_E only case"
			//Generate Poissoin in each run by time tstop
			for i=0, cellsE.count-1 {
				spkvec_list.append( poissonGenerator(seedlist.x(i),steps_per_ms,tstop,Input_spk_avg_fr ))
				cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
				nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
			}
		}else {
			if (INSERT_SPK_to_I){
				//seedGen(cellsI.count) 
				//Generate Poissoin in each run by time tstop
				for i=0, cellsI.count-1 {
					spkvec_list.append( poissonGenerator(seedlist.x(str_I+i),steps_per_ms,tstop,Input_spk_avg_fr ))
					cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
					nc_append(str_FFin+i,str_I+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
				}
			}
		}
	}
}	
 
 
 
 
 
 
 
 
 
 
 
 
 //// Poisson Generator 
//objref rseed
//rseed = new Random()
//rseed.negexp(500)
//rseed.Random123() //identifiers = 0

//objref seedlist
//seedlist = new Vector()
seedlist.resize(0)

proc seedGen() { local i, seed //$1 = total number of seed //Before run
   seedlist = new Vector($1)
   for i = 0,$1-1 {
      seed = rseed.repick
	  seedlist.x(i) = seed
      }
	print "Called : seedGen"
}

obfunc  poissonGenerator() { local tmpr,p,ii localobj rr, spktrain, spktime 
//Return vector of spiking time (in ms)
// $1 = seed, $2 = resolution (size of one bin in ms), $3 = time (ms), $4 = average firing rate
//	printf("Called poissonGenerator")
//	printf("Seed: %f \n", $1)
	rr = new Random($1)
	//rr.Random123($1) //? check later 
	rr.uniform(0, 1)
	spktrain = new Vector($3/$2) //Not use now
	spktime = new Vector()
	p = $4/(1000/$2)
	//printf("p: %f \n", p)
	for ii =0,spktrain.size-1 {
		tmpr = rr.repick
		if (tmpr < p){  //spike occur
			spktrain.x(ii) = 1
			spktime.append($2*ii)
		}else{
			spktrain.x(ii) = 0
		}
	}
	return spktime // spkvec, 1) the multiple arrival time in one VecStim is account as the only one spike. 2) The spike time vector need to be sort ascending(less...more).
}


//objref spkvec_list, cellsFFin
//spkvec_list = new List()
//cellsFFin = new List()
spkvec_list.remove_all()
cellsFFin.remove_all()
if(INSERT_SPK_INPUT ){
print "Called PoisSpk "
//Generate artificial cells for input   //# = total cell
	 // Feedforward(FF) input Poisson spikes cell
	wFFin = 0.0005 //0.001 // weight for FF input // refer to 
	str_FFin = cIDrec+1
	FFinrec = -1
	nFF = cellsE.count + cellsI.count //give FF input to E cell only
	FFzpos = -50
	for (i=0;i<cellsE.count + cellsI.count;i=i+1){
		cIDrec = cIDrec+1 
		FFinrec=FFinrec+1
		cell_append(new In_spk_VecStim(),0,100, FFzpos,cIDrec, FFinrec,0) // cell type = 0  for FF input
		cellsFFin.append(cells.object(cIDrec))
	}
	if(MULT_TRIAL){
		if (cntTrial ==1){ // first run
		seedGen(cellsCN.count*N_TRIAL) 
		genseedlist = seedlist.c
		seedlist = genseedlist.c(1,cellsCN.count)
		printf("seedlist ID from 1 to %g\n", cellsCN.count)
		printf("seedlist.size = %g\n",seedlist.size)
		}else {
		seedlist = genseedlist.c((cntTrial-1)*cellsCN.count+1,cntTrial*cellsCN.count)
		printf("seedlist ID from %g to %g\n", (cntTrial-1)*cellsCN.count+1,cntTrial*cellsCN.count)
		printf("seedlist.size = %g\n",seedlist.size)
		}
	} else { seedGen(cellsE.count+cellsI.count) }
	spkvec_list = new List()
	
if (INSERT_SPK_to_E && INSERT_SPK_to_I){
	print "Called : both E I"
	//seedGen(cellsE.count+cellsI.count) 
	print "seedGen generator"
	print "spkvec_list's size = ", spkvec_list.count
	
	//Generate Poissoin in each run by time tstop
	for i=0, cellsFFin.count-1 {
		spkvec_list.append( poissonGenerator(seedlist.x(i),steps_per_ms,tstop,Input_spk_avg_fr ))
		cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
		nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay  //check the weight
	}
	
	}else {
		if (INSERT_SPK_to_E){
			print "called INSERT_SPK_to_E only case"
			//Generate Poissoin in each run by time tstop
			for i=0, cellsE.count-1 {
				spkvec_list.append( poissonGenerator(seedlist.x(i),steps_per_ms,tstop,Input_spk_avg_fr ))
				cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
				nc_append(str_FFin+i,str_E+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
			}
		}else {
			if (INSERT_SPK_to_I){
				//seedGen(cellsI.count) 
				//Generate Poissoin in each run by time tstop
				for i=0, cellsI.count-1 {
					spkvec_list.append( poissonGenerator(seedlist.x(str_I+i),steps_per_ms,tstop,Input_spk_avg_fr ))
					cellsFFin.o(i).pp.play(spkvec_list.o(i)) 
					nc_append(str_FFin+i,str_I+i,0,wFFin,0) //srcindex, tarcelindex, synindex, weight, delay 
				}
			}
		}
	}
}	
*/