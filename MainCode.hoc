//Main Code
load_file("nrngui.hoc") //load basics library
load_file("ranstream.hoc") //for InGauss random seed
load_file("PD_Parameters.hoc") //Parameters

load_file("PD_CellsTemplate.hoc") //load basics library  Note: Parameters for Cells template are specified inside
load_file("PD_NetSpecIntf.hoc") // Network specification interface
load_file("PD_load_position_file.hoc") //Now do not read INpos.txt 
load_file("PD_load_position_file_M1.hoc") //Read position of M1

load_file("PD_ObjrefDeclare.hoc") // Object declaration 

/////////////////////////////////////////////////////////////////////////
// parameter & variables with user specified values
RESOLUTION = 1 //bins = 1 ms
MEAN = 0
STDEV  = 0 //0.115
THRESHOLD = -55

strdef DIRLOC, F_PRE,F_PRENAME 
DIRLOC = "RunSingle_Net/"

POSTFIX = 1

CELL_TYPE = 1 //1 = WT, 2 = KO  /////////////////////////////////// SET CELL TYPE HERE //////////////////////////////////

GPM_INPUT_to_VL = 1 // Use GPm for Input



IndvCellRepeats = 1 // one set of WT and KO

strdef postfixTxt, dirLoc, core 

postfixTxt = "" //testingSixtyWIIWEE5s_restart


core = "TestWT_slnt_InjI_singleE570_burst_lclConn_Wspecified_1_6_11_41.5" //"TestRunVLnetKO_Setparam_burst_lclConn_Wspecified_1_6_11_41.5" 
core = "testCode_Inj0.25GPm_noise"//"testCode_noInj_noise"
//"TestKOInjectI_specifiedE_"
dirLoc = DIRLOC //"SimulationResult/SfN_ctrlParamters/" 

TRIAL_NO = 1
/*
objref KO_List, WT_List, AllCell_List
KO_List = new List()
WT_List = new List()
AllCell_List = new List()

objref KO, WT
KO = new KO_Cell()
WT = new WT_Cell()

KO_List.append(KO) AllCell_List.append(KO)  //KO cells in even number
WT_List.append(WT) AllCell_List.append(WT)  //WT cells in odd number



objref in
access WT.soma
    in = new InGauss(0.5) // add background noise to the cell 
	in.mean = MEAN // nA
	in.stdev = STDEV // nA
	in.del = 0 // ms
	in.dur = 1e9 // "forever"
	*/
	
	
/////////////////////////////////////////////////////////////////////////
MAKE_M1_LAYER = 1

MULT_TRIAL = 0 
N_TRIAL = 1
cntTrial = 1 

N_REPEAT = 100

LOCAL_CONNECT = 1
INDV_NEURON = 0
INSERT_SPK_INPUT = 1
INSERT_SPK_to_E = 1
INSERT_SPK_to_I = 1
INSERT_I_INPUT = 0
INSERT_I_to_E = 1
INSERT_I_to_I = 0

INSERT_I_to_SpecifiedE = 1 // Vector --> injIClamp_SingleVec /  IClamp --> injIClamp_Single
ID_SPECIFIED_E = 570 //In the center part of Network

ADD_SPONTANEOUS_ACTIVITY = 1 // When both mean and stdev = 0 --> Cells are silent(with zero spontaneous activity)
NOISE_POISSONSPK_GPm = 0
NOISE_POISSONSPK_M1 = 1

////////////////////////////////////////////////////////////////////////////
RANDOM123_ID1_POISSONSPK = 1 
RANDOM123_ID3_RUN_POISSONSPK = TRIAL_NO //For  multiple trials (trial#)

////////////////////////////////////////////////////////////////////////////
// connection weight
W_MULT = 1
W_SCALE = 0.00001
W_MULT_TC = 50000
W_SCALE_TC =W_SCALE

Light_Stim_Amp = 0.25
////////////////////////////////////////////////////////////////////////////
objref genseedlist
genseedlist = new Vector()
cIDrec = -1

proc spont_act() {
//MEAN = $1
//STDEV = $2
//N_REPEAT = $3
//Input_I_Amp = $1 // [nA] 
Input_I_Amp = -0.3  // Add line for user input stim.dur and stim.del
Input_spk_avg_fr = $1 // [Hz]
tstop = $2 // Have to set tstop here because the random_stream_offset_ setting need the tstop for parameter setting
steps_per_ms = 1    // -----------> set resolution and then use the variable in all references for unified process
v_init = -70

//sprint(postfixTxt,"%s_%2.2fnA",core,Input_I_Amp)
sprint(postfixTxt,"%s_%2.2fHz",core,Input_spk_avg_fr)
if(MULT_TRIAL){
sprint(postfixTxt,"%s_trial%g",postfixTxt,cntTrial)
}
if(POSTFIX){
	printf( "/////////////// %s /////////////////\n", postfixTxt)
}

xopen("PD_NetGenn.hoc") printf( "////// Generate VL network /////")
xopen("PD_NetGenn_GPm.hoc")   printf( "////// Generate GPm network /////")
xopen("PD_NetGenn_M1.hoc")   printf( "////// Generate M1 network /////")
xopen("PD_NetSimRec.hoc")  printf( "////// Generate vector recordings in VL network simulation /////")
xopen("PD_NetSimRec_M1.hoc")  printf( "////// Generate vector recordings in M1 network simulation /////")

t1 = startsw()
print "tstop = ",tstop
printf("random_stream_offset_ = (tstop+1000)*1/dt = %f\n",random_stream_offset_ ) 

///////// Connection Specification ///////// 

if(LOCAL_CONNECT){
RUN_WEE = 1
RUN_WEI = 1
RUN_WIE = 1
RUN_WII = 1
}else{
RUN_WEE = 0
RUN_WEI = 0
RUN_WIE = 0
RUN_WII = 0
}


xopen("PD_LocalConn.hoc")
xopen("PD_thalamocorticalConn.hoc")

t2 = startsw()
print "Runtime for local connection ", t2-t1


VectorRecord() 
VectorRecord_M1() 
spikerecord()
//spikerecordEI()
if ( CELL_TYPE == 1){ // 1 = WT, 2 = KO
	if(INSERT_I_to_SpecifiedE){
	load_file("LVnetSesWT_injSingleE.ses")
	} else{
	load_file("LVnetSesWT.ses")
	}
}else{
	if(INSERT_I_to_SpecifiedE){
	load_file("LVnetSesKO_injSingleE.ses")
	}else{
	load_file("LVnetSesKO.ses")
	}

}
tstop = $2 // Need to set simulation parameters here again because some parameters are change during downloading session file
steps_per_ms = 1    // -----------> set resolution and then use the variable in all references for unified process
v_init = -70
print "Calling run()"
//printf("Before Run :random_stream_offset_ = %f\n",random_stream_offset_ ) 
run_all(tstop)
//printf("After Run :random_stream_offset_ = %f\n",random_stream_offset_ ) 
t3 = startsw()
print "Runtime for simulation ", t3-t2
//graphList[0].o(0).exec_menu("View = plot")
//graphList[1].o(0).exec_menu("View = plot")
//graphList[2].o(0).exec_menu("View = plot")

GetSpkBin_of_injSpecifiedE()

//rasterplot()
print "Runtime for raster plot ", startsw()-t3
t4 = startsw()
//rasterplotEI()

saveSpikesToFile()

//saveSomaVolt()
save_all_soma_rec_vec()

create_sim_profile2() 
create_sim_profile_cellConfig() 
//if(cntTrial ==1){ saveGenSeedlist()}
//saveSeedlist()
print "Runtime for saving vectors ", startsw()-t4
print "Done the simulation for input current amplitude = ", $1 
print ":::Simulation Setting::::"
print "INSERT_SPK_INPUT = ", INSERT_SPK_INPUT
print "INSERT_SPK_to_E = ", INSERT_SPK_to_E
print "INSERT_SPK_to_I = ", INSERT_SPK_to_I
print "INSERT_I_INPUT = ", INSERT_I_INPUT
print "INSERT_I_to_E = ",INSERT_I_to_E
print "INSERT_I_to_I = ",INSERT_I_to_I
print "INSERT_I_to_SpecifiedE = ", INSERT_I_to_SpecifiedE
print "ID_SPECIFIED_E = ", ID_SPECIFIED_E
print "LOCAL_CONNECT = ",LOCAL_CONNECT
print "INDV_NEURON = ",INDV_NEURON
print "postfixTxt = ",postfixTxt

}

TSTOP = 2000
PoisSpkHz = 12


spont_act(PoisSpkHz,TSTOP)

//saveRecordSeed()

if(INSERT_I_INPUT){
plot_input_current_info()
}	
