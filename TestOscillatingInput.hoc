/// Testing the oscillating input 

//Main Code
load_file("nrngui.hoc") //load basics library
T_everythng = startsw()
load_file("ranstream.hoc") //for InGauss random seed
load_file("PD_Parameters.hoc") //Parameters
////////////////////////////////////////////////////
// Make M1 layer or not? , Add I cells to VL and M1 or not?
MAKE_M1_LAYER = 1  
ADD_I_to_M1 = 0
ADD_I_to_VL = 0
////////////////////////////////////////////////////////
load_file("PDfb_CellsTemplate_FewBurstModel1.hoc") 




/////// Poisson spikes input ///////



obfunc  OscilatingInputFR() {local osc_f, phase, osc_amp, meanFR,time
// $1 = osc_f, $2 = phase (in rad), $3 = osc_amp, $4 = meanFR
{ $1 = osc_f, $2 = phase, $3 = osc_amp, $4 = meanFR }
time =tstop / steps_per_ms
v1 = new Vector(time))
v1.sin( osc_f,phase, 1/ steps_per_ms) // dt = 1 ms
v1.mul( osc_amp)
v1.add(meanFR) 
} 



//New write

//RANDOM123_ID1_POISSONSPK = 1
//RANDOM123_ID3_RUN_POISSONSPK = 1 // Specified in main code

obfunc  poissonGeneratorFRvaries() { local tmpr,p,ii localobj rr, spktrain, spktime 
//Return vector of spiking time (in ms)
// $1 = seed, $2 = resolution (size of one bin in ms), $3 = time (ms), $4 = average firing rate
	rr = new Random()
	rr.uniform(0,1)
	rr.Random123(RANDOM123_ID1_POISSONSPK,$1,RANDOM123_ID3_RUN_POISSONSPK)
	spktrain = new Vector($3/$2) //Not use now
	spktime = new Vector()
	p = $4/(1000/$2)
	// Called another function to make oscillating input   
	
	for ii =0,spktrain.size-1 {
		tmpr = rr.repick
		
		if (tmpr < p){  //spike occur // if  p< 0 
			spktrain.x(ii) = 1
			spktime.append($2*ii)
		}else{
			spktrain.x(ii) = 0
		}
	}
	return spktime // spkvec, 1) the multiple arrival time in one VecStim is account as the only one spike. 2) The spike time vector need to be sort ascending(less...more).
}
 
spkvec_list.remove_all()
cellsFFin.remove_all()
//objref recordseed
//recordseed = new Vector()

recordseed.resize(0)


objref R_W_POISSPK, R_FR_POISSPK_VL






	wFFin = W_POISSPK_VL //0.001 // weight for FF input 
	if(VARIE_W_POISSPK){
		
		R_W_POISSPK = new Random()
		R_W_POISSPK.Random123(Rand123Seed_append("VARIE_W_POISSPK"),0,RANDOM123_ID3_RUN_POISSONSPK)
		R_W_POISSPK.normal(W_POISSPK_VL_mean, W_POISSPK_VL_sigma*W_POISSPK_VL_sigma )
		wFFin = R_W_POISSPK.repick()
		if(wFFin < 0) { wFFin = 0 }
	}
	if(VARIE_FR_POISSPK){
		
		R_FR_POISSPK_VL = new Random()
		R_FR_POISSPK_VL.Random123(Rand123Seed_append("VARIE_FR_POISSPK"),0,TRIAL_NO)
		R_FR_POISSPK_VL.normal(FR_POISSPK_VL_mean, FR_POISSPK_VL_sigma*FR_POISSPK_VL_sigma )
		Input_spk_avg_fr = R_FR_POISSPK_VL.repick()
		if(Input_spk_avg_fr < 0 ){ Input_spk_avg_fr = 0}
	}
		
	str_FFin = cIDrec+1
	FFinrec = -1
	nFF= cellsE.count + cellsI.count //give FF input to E cell only
	FFzpos = -50
	for (i=0;i<cellsE.count + cellsI.count;i=i+1){
		cIDrec = cIDrec+1 
		FFinrec=FFinrec+1
		cell_append(new In_spk_VecStim(),0,100, FFzpos,cIDrec, FFinrec,0) // cell type = 0  for FF input
		cellsFFin.append(cells.object(cIDrec))
	}